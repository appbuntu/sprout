# -*- mode: yaml -*-
# vi: set ft=yaml:

#
# Project configuration
#
project:
  name: <%= name %>
  url: <%= url %>

#
# Manage command aliases for the current application
#
commands:

  # Run application install scripts
  install:
    - composer install
    - bundle install
    - npm install
    - bower install
    - grunt build

  # Manage build tools
  dev:
    - grunt %args%

  # Manage front-end dependencies
  asset:
    - bower %args%

  # Manage back-end dependencies
  vendor:
    - composer %args%

  # Run WP-CLI commands over SSH
  wp:
    - wp @development %args%

  # Create a backup of the current database with a nice timestamp
  backup:
    - mkdir -p backup
    - wp @development db export backup/$(date +'%Y-%m-%d-%H-%M-%S').local.sql

  # Package up entire application into a gzipped tar file
  dist:
    - tar -zcvf dist.tar.gz .

#
# Manage deployment for the current application
#
deployment:

  # Repository settings
  repository:
    repo_url: <%= repository %>
    branch: :master
    scm: :rsync

  # Other settings that will be passed directly to Capistrano
  # @see http://capistranorb.com/
  settings:
    keep_releases: 5
    format: :pretty
    log_level: :verbose
    use_sudo: false
    ssh_options:
      keys: ~/.ssh/id_rsa
      forward_agent: true
      paranoid: true
    # Add additional directories to $PATH. This is useful if you're
    #  on a shared hosting environment (i.e. GoDaddy) and you need
    #  to use an executable such as wp-cli for database migration.
    # default_env:
    #   path: /opt/wp-cli/bin:$PATH

  # Capistrano rsync options and install procedure
  # @see https://github.com/Bladrak/capistrano-rsync
  rsync:
    stage: tmp/deploy
    cache: shared/deploy
    scm: :git
    depth: 1
    # Options to pass to the rsync command
    # @see http://linux.die.net/man/1/rsync
    options:
      - --recursive
      - --delete
      - --delete-excluded
      - --include="vendor/**/*" # Overrides any excluded patterns
      - --exclude="src/"
      - --exclude="bower_components/"
      - --exclude="node_modules/"
      - --exclude=".sass-cache/"
      - --exclude=".editorconfig"
      - --exclude=".env.sample"
      - --exclude=".git*"
      - --exclude="Gemfile*"
      - --exclude="Gruntfile*"
      - --exclude="Juicefile*"
      - --exclude="composer.*"
      - --exclude="package.json"
      - --exclude="bower.json"
      - --exclude="README.*"
    # Run application install scripts
    install:
      - composer install --no-dev
      - bundle install
      - npm install
      - bower install
      - grunt build
    # Run scripts before the deployment starts
    # pre_scripts:
    #   - touch .maintenance
    # Run scripts before the deployment finishes
    # post_scripts:
    #   - rm .maintenance
    #   - sudo service apache2 restart

  # Slack integration
  # @see https://github.com/onthebeach/capistrano-slackify
  # slack:
  #   url: https://hooks.slack.com/services/your-token
  #   username: Deploybot
  #   channel: "#devops"
  #   emoji: ":rocket:"

  # Deployment stages
  stages:
    # production:
    #   server: 192.168.1.1
    #   path: /var/www/production
    #   user: deploy
    #   url: example.com
    #   uploads: app/uploads
    #   tmp: tmp
    #   shared:
    #     - .env.production
    #   ignore:
    #     - robots.txt
    #   roles:
    #     - :web
    #     - :app
    #     - :db

    # staging:
    #   server: 192.168.1.1:1234
    #   path: /var/www/staging
    #   user: deploy
    #   url: staging.example.com
    #   uploads: app/uploads
    #   tmp: tmp
    #   shared:
    #     - .env.staging
    #   roles:
    #     - :web
    #     - :app
    #     - :db

    # This is your development environment used to push/pull database files,
    #  uploads, the .env file, etc.
    vagrant:
      server: <%= vm_ip %>
      path: <%= vm_srv %>
      user: vagrant
      pass: vagrant
      url: <%= url %>
      uploads: app/uploads
      backup: backup
      tmp: tmp
      roles:
        - :dev
