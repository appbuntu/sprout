/**
 * Clearfix
 *
 * @output - Micro clearfix
 */
@mixin clearfix
  zoom: 1

  &:before,
  &:after
    content: "\0020"
    display: block
    height: 0
    overflow: hidden

  &:after
    clear: both

/**
 * Define z-index from map
 *
 * @param {ArgList}  $index    - List of z-index keys
 * @param {String}  [$context] - Applies context if last item in ArgList
 *   is a valid CSS position value
 *
 * @example - How to apply z-index
 *   ```sass
 *   +z-index("index", "to", "fetch", relative)
 *   ```
 *
 * @output - Position and z-index props
 */
@mixin z-index($index...)
  $positions: (absolute, relative, fixed, static)
  $last: last($index)

  @if index($positions, $last)
    $index: slice($index, 1, length($index) - 1)
    position: $last

  @if map-fetch($z-index, $index...)
    z-index: map-fetch($z-index, $index...)
  @else
    @warn "Whoa there! Argument `#{inspect($index)}` was not found in $z-index map"

/**
 * Shift columns
 *
 * @param {String} $breakpoint        - Breakpoint to apply shift to
 * @param {Number} $columns           - Amount to shift columns
 * @param {Bool}   $has-gutter (true) - Add gutter value to shift
 *
 * @example
 *  ```sass
 *  div
 *    +_("large", 12)
 *    +shift("large", -4)
 *  ```
 *
 * @output - Margin to shift columns
 */
@mixin shift($breakpoint, $columns, $has-gutter: true)
  @if not index(flint-get-all-keys(), $breakpoint)
    @error "Breakpoint '#{$breakpoint}' does not exist. Shifting by '#{$columns}' failed."

  $width-map: flint-calc-width($breakpoint, $columns)
  $gutter: if($has-gutter, flint-get-gutter(), 0)

  +_($breakpoint)
    @if map-fetch($flint, "settings", "grid") == "fluid"
      margin-left: (map-get($width-map, "target") + $gutter) / map-get($width-map, "context") * 100%
    @else
      margin-left: map-get($width-map, "target") + $gutter

/**
 * Align element
 *
 * @param {String} $alignment
 * @param {Number} $height
 *
 * @example
 *   ```haml
 *   %div
 *     %div= $foo
 *   ```
 *
 *   ```sass
 *   div
 *     +align(middle)
 *   ```
 *
 * @output - Styles to align direct children of parent
 */
@mixin align($alignment, $height: null)
  display: table

  & > *
    display: table-cell
    vertical-align: $alignment
    height: $height

/**
 * Replaces parent selector with selector + modifier
 *
 * @param {String} $modifier        - Modifer to append to parent selector
 * @param {Number} $levels-deep (1) - How many level back to find parent
 *
 * @example
 *   ```sass
 *   li
 *     a
 *       padding:
 *         left: 1em
 *
 *       +parent(":first-of-type")
 *         padding:
 *           left: 0
 *   ```
 *
 * @output - New selector list with modifier appended to parent
 */
@mixin parent($modifier, $levels-deep: 1)
  $selectors: ()

  @each $selector-group in &
    $index: length($selector-group) - $levels-deep
    $parent: nth($selector-group, $index)
    $selectors: append($selectors, set-nth($selector-group, $index, $parent + $modifier), "comma")

  @at-root #{$selectors}
    @content

/**
 * Use font awesome icon
 *
 * @param {String} $fa-icon - Variable name of the icon.
 *
 * @note See '_variables.scss' within the font awesome lib for the full
 *  list of icon variables
 *
 * @example
 *   ```sass
 *   a:after
 *     +icon($fa-var-facebook)
 *   ```
 *
 * @output - Font awesome base styles and icon's ASCII content
 */
@mixin icon($fa-var-icon)
  +fa-icon
  content: $fa-var-icon

/**
 * Generate triangle
 *
 * @param {String} $direction
 * @param {Number} $size
 * @param {Color}  $color
 *
 * @example
 *   ```sass
 *   a:after
 *     +triangle("top", 1.5em, #fff)
 *   ```
 *
 * @output - Styles for a triangle, applicable to a pseudo element
 */
@mixin triangle($direction, $size: 1em, $color: currentColor)
  $perpendicular-borders: $size solid transparent

  @if not index(top right bottom left, $direction)
    @warn "Direction for 'triangle()' must be: top, right, bottom or left"
  @else
    content: " "
    width: 0
    height: 0
    border:
      #{opposite-position($direction)}: $size * 1.5 solid $color

    @if $direction == top or $direction == bottom
      border:
        right: $perpendicular-borders
        left: $perpendicular-borders
    @else if $direction == right or $direction == left
      border:
        top: $perpendicular-borders
        bottom: $perpendicular-borders
